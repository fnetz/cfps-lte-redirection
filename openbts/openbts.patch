diff --git a/Control/L3StateMachine.cpp b/Control/L3StateMachine.cpp
index b0c8e20..9fe296b 100644
--- a/Control/L3StateMachine.cpp
+++ b/Control/L3StateMachine.cpp
@@ -85,11 +85,11 @@ void MachineBase::machineErrorMessage(int level, int state, const L3Message *l3m
 
 	// This kind sucks, digging into the Logger.  The logger could be better.
 	if (l3msg) {
-		Log(level).get() <<os <<" Unexpected L3 message:"<<l3msg;
+		Log(level).get() <<os.str() <<" Unexpected L3 message:"<<l3msg;
 	} else if (sipmsg) {
-		Log(level).get() <<os <<" Unexpected SIP message:"<<sipmsg;
+		Log(level).get() <<os.str() <<" Unexpected SIP message:"<<sipmsg;
 	} else {
-		Log(level).get() <<os <<" Unexpected"<<LOGHEX(state);
+		Log(level).get() <<os.str() <<" Unexpected"<<LOGHEX(state);
 	}
 }
 
diff --git a/GPRS/MSInfo.cpp b/GPRS/MSInfo.cpp
index ba112b1..c0d8765 100644
--- a/GPRS/MSInfo.cpp
+++ b/GPRS/MSInfo.cpp
@@ -638,7 +638,7 @@ bool MSInfo::msAssignChannels()
         if (msPCHDowns.size() > 1) {
             std::ostringstream os;
             msDumpChannels(os);
-            LOG(INFO) << "Multislot assignment for "<<this<<os;
+            LOG(INFO) << "Multislot assignment for "<<this<<os.str();
         }
 
 	} else {
diff --git a/GSMShare/A51.cpp b/GSMShare/A51.cpp
index 538377c..cd688d4 100644
--- a/GSMShare/A51.cpp
+++ b/GSMShare/A51.cpp
@@ -148,7 +148,7 @@ bit getbit() {
 
 /* Do the A5/1 key setup.  This routine accepts a 64-bit key and
  * a 22-bit frame number. */
-void keysetup(byte key[8], word frame) {
+void keysetup(u8 key[8], word frame) {
 	int i;
 	bit keybit, framebit;
 
@@ -198,7 +198,7 @@ key */
  * B->A frame.  You allocate a 15-byte buffer
  * for each direction, and this function fills
  * it in. */
-void run(byte AtoBkeystream[], byte BtoAkeystream[]) {
+void run(u8 AtoBkeystream[], u8 BtoAkeystream[]) {
 	int i;
 
 	/* Zero out the output buffers. */
@@ -220,7 +220,7 @@ void run(byte AtoBkeystream[], byte BtoAkeystream[]) {
 	}
 }
 
-void A51_GSM( byte *key, int klen, int count, byte *block1, byte *block2 )
+void A51_GSM( u8 *key, int klen, int count, u8 *block1, u8 *block2 )
 {
 	assert(klen == 64);
 	keysetup(key, count); // TODO - frame and count are not the same
diff --git a/GSMShare/A51.h b/GSMShare/A51.h
index d1337de..c242963 100644
--- a/GSMShare/A51.h
+++ b/GSMShare/A51.h
@@ -3,9 +3,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-typedef unsigned char byte;
+typedef unsigned char u8;
 typedef unsigned long word;
 typedef word bit;
 
-void A51_GSM( byte *key, int klen, int count, byte *block1, byte *block2 );
+void A51_GSM( u8 *key, int klen, int count, u8 *block1, u8 *block2 );
 
diff --git a/GSMShare/A51Test.cpp b/GSMShare/A51Test.cpp
index 5e25ba9..b856dd1 100644
--- a/GSMShare/A51Test.cpp
+++ b/GSMShare/A51Test.cpp
@@ -98,13 +98,13 @@ ConfigurationTable gConfig;
 /* Test the code by comparing it against
  * a known-good test vector. */
 void test() {
-	byte key[8] = {0xEF, 0xCD, 0xAB, 0x89, 0x67, 0x45, 0x23, 0x12};
+	u8 key[8] = {0xEF, 0xCD, 0xAB, 0x89, 0x67, 0x45, 0x23, 0x12};
 	word frame = 0x134;
-	byte goodAtoB[15] = { 0x53, 0x4E, 0xAA, 0x58, 0x2F, 0xE8, 0x15,
+	u8 goodAtoB[15] = { 0x53, 0x4E, 0xAA, 0x58, 0x2F, 0xE8, 0x15,
 	                      0x1A, 0xB6, 0xE1, 0x85, 0x5A, 0x72, 0x8C, 0x00 };
-	byte goodBtoA[15] = { 0x24, 0xFD, 0x35, 0xA3, 0x5D, 0x5F, 0xB6,
+	u8 goodBtoA[15] = { 0x24, 0xFD, 0x35, 0xA3, 0x5D, 0x5F, 0xB6,
 	                      0x52, 0x6D, 0x32, 0xF9, 0x06, 0xDF, 0x1A, 0xC0 };
-	byte AtoB[15], BtoA[15];
+	u8 AtoB[15], BtoA[15];
 	int i, failed=0;
 
 	A51_GSM(key, 64, frame, AtoB, BtoA);
diff --git a/SGSNGGSN/Sgsn.cpp b/SGSNGGSN/Sgsn.cpp
index 3301b74..f8b2a0c 100644
--- a/SGSNGGSN/Sgsn.cpp
+++ b/SGSNGGSN/Sgsn.cpp
@@ -127,7 +127,7 @@ void SgsnInfo::sirm()
 {
 	std::ostringstream ss;
 	sgsnInfoDump(this,ss);
-	SGSNLOG("Removing SgsnInfo:"<<ss);
+	SGSNLOG("Removing SgsnInfo:"<<ss.str());
 	sSgsnInfoList.remove(this);
 	delete this;
 }
@@ -224,7 +224,7 @@ static void GmmRemove(GmmInfo *gmm)
 {
 	std::ostringstream ss;
 	gmmInfoDump(gmm,ss,0);
-	SGSNLOG("Removing gmm:"<<ss);
+	SGSNLOG("Removing gmm:"<<ss.str());
 	SgsnInfo *si;
 	RN_FOR_ALL(SgsnInfoList_t,sSgsnInfoList,si) {
 		// The second test here should be redundant.
diff --git a/SIP/SIP2Interface.cpp b/SIP/SIP2Interface.cpp
index bf4e9f8..9818bd5 100644
--- a/SIP/SIP2Interface.cpp
+++ b/SIP/SIP2Interface.cpp
@@ -715,7 +715,7 @@ MySipInterface gSipInterface;	// Here it is.
 
 // Pat added to hook messages from the ORTP library.  See ortp_set_log_handler in ortp.c.
 extern "C" {
-	static void ortpLogFunc(OrtpLogLevel /*lev unused*/, const char *fmt, va_list args)
+	static void ortpLogFunc(const char* /* domain */,OrtpLogLevel /*lev unused*/, const char *fmt, va_list args)
 	{
 		// This floods the system with error messages, so regulate output to the console.
 		static time_t lasttime = 0;	// No more than one message per minute.
diff --git a/SIP/SIPRtp.cpp b/SIP/SIPRtp.cpp
index ed8ed40..6412e36 100644
--- a/SIP/SIPRtp.cpp
+++ b/SIP/SIPRtp.cpp
@@ -125,7 +125,7 @@ void SipRtp::initRTP1(const char *d_ip_addr, unsigned d_port, unsigned dialogId)
 	rtp_session_set_payload_type(mSession, 3);
 	// (pat added) The last argument is user payload data that is passed to ourRtpTimestampJumpCallback()
 	// I was going to use the dialogId but decided to look up the dialog by mSession.
-	rtp_session_signal_connect(mSession,"timestamp_jump",(RtpCallback)ourRtpTimestampJumpCallback,dialogId);
+	rtp_session_signal_connect(mSession,"timestamp_jump",(RtpCallback)ourRtpTimestampJumpCallback,(void*)dialogId);
 
 	gCountRtpSockets++;
 #ifdef ORTP_NEW_API
diff --git a/Transceiver52M/UHDDevice.cpp b/Transceiver52M/UHDDevice.cpp
index d52be55..52a9545 100644
--- a/Transceiver52M/UHDDevice.cpp
+++ b/Transceiver52M/UHDDevice.cpp
@@ -25,14 +25,15 @@
 #include <uhd/version.hpp>
 #include <uhd/property_tree.hpp>
 #include <uhd/usrp/multi_usrp.hpp>
-#include <uhd/utils/thread_priority.hpp>
-#include <uhd/utils/msg.hpp>
+#include <uhd/utils/thread.hpp>
+#include <uhd/utils/log_add.hpp>
 
 #ifdef HAVE_CONFIG_H
 #include "config.h"
 #endif
 
 #define B2XX_CLK_RT      26e6
+#define E3XX_CLK_RT      17'333'333
 #define B100_BASE_RT     400000
 #define USRP2_BASE_RT    390625
 #define TX_AMPL          0.3
@@ -44,6 +45,7 @@ enum uhd_dev_type {
 	B100,
 	B2XX,
 	X3XX,
+	E3XX,
 	UMTRX,
 	NUM_USRP_TYPES,
 };
@@ -87,6 +89,9 @@ static struct uhd_dev_offset uhd_offsets[NUM_USRP_TYPES * 2] = {
 	{ B2XX,  4, B2XX_TIMING_4SPS, "B200 4 SPS" },
 	{ X3XX,  1, 1.5360e-4, "X3XX 1 SPS"},
 	{ X3XX,  4, 1.1264e-4, "X3XX 4 SPS"},
+	// Values not exactly known, copy from B2XX for the time
+	{ E3XX,  1, B2XX_TIMING_1SPS, "E300 1 SPS" },
+	{ E3XX,  4, B2XX_TIMING_4SPS, "E300 4 SPS" },
 	{ UMTRX, 1, 9.9692e-5, "UmTRX 1 SPS" },
 	{ UMTRX, 4, 7.3846e-5, "UmTRX 4 SPS" },
 };
@@ -126,6 +131,7 @@ static double select_rate(uhd_dev_type type, int sps)
 	case B100:
 		return B100_BASE_RT * sps;
 	case B2XX:
+	case E3XX:
 	case UMTRX:
 		return GSMRATE * sps;
 	default:
@@ -318,19 +324,26 @@ void *async_event_loop(uhd_device *dev)
     since we already report using the logging facility. Direct
     everything else appropriately.
  */
-void uhd_msg_handler(uhd::msg::type_t type, const std::string &msg)
+void uhd_msg_handler(const uhd::log::logging_info& info)
 {
-	switch (type) {
-	case uhd::msg::status:
-		LOG(INFO) << msg;
+	switch (info.verbosity) {
+	case uhd::log::severity_level::trace:
+	case uhd::log::severity_level::debug:
+		LOG(DEBUG) << info.message;
+		break;
+	case uhd::log::severity_level::info:
+		LOG(INFO) << info.message;
 		break;
-	case uhd::msg::warning:
-		LOG(WARNING) << msg;
+	case uhd::log::severity_level::warning:
+		LOG(WARNING) << info.message;
 		break;
-	case uhd::msg::error:
-		LOG(ERR) << msg;
+	case uhd::log::severity_level::error:
+		LOG(ERR) << info.message;
 		break;
-	case uhd::msg::fastpath:
+	case uhd::log::severity_level::fatal:
+		LOG(ALERT) << info.message;
+		break;
+	default:
 		break;
 	}
 }
@@ -431,6 +444,9 @@ int uhd_device::set_rates(double tx_rate, double rx_rate)
 	if (dev_type == B2XX) {
 		if (set_master_clk(B2XX_CLK_RT) < 0)
 			return -1;
+	} else if (dev_type == E3XX) {
+		if (set_master_clk(E3XX_CLK_RT) < 0)
+			return -1;
 	}
 
 	// Set sample rates
@@ -488,7 +504,7 @@ bool uhd_device::parse_dev_type()
 	std::string mboard_str, dev_str;
 	uhd::property_tree::sptr prop_tree;
 	size_t usrp1_str, usrp2_str, b100_str, b200_str,
-	       b210_str, x300_str, x310_str, umtrx_str;
+	       b210_str, x300_str, x310_str, e320_str, umtrx_str;
 
 	prop_tree = usrp_dev->get_device()->get_tree();
 	dev_str = prop_tree->access<std::string>("/name").get();
@@ -501,6 +517,10 @@ bool uhd_device::parse_dev_type()
 	b210_str = mboard_str.find("B210");
 	x300_str = mboard_str.find("X300");
 	x310_str = mboard_str.find("X310");
+	e320_str = mboard_str.find("E320");
+	if (e320_str == std::string::npos) {
+		e320_str = mboard_str.find("e320");
+	}
 	umtrx_str = dev_str.find("UmTRX");
 
 	if (usrp1_str != std::string::npos) {
@@ -524,6 +544,8 @@ bool uhd_device::parse_dev_type()
 		dev_type = X3XX;
 	} else if (x310_str != std::string::npos) {
 		dev_type = X3XX;
+	} else if (e320_str != std::string::npos) {
+		dev_type = E3XX;
 	} else if (usrp2_str != std::string::npos) {
 		dev_type = USRP2;
 	} else if (umtrx_str != std::string::npos) {
@@ -543,18 +565,15 @@ int uhd_device::open(const std::string &args, ReferenceType ref)
 {
 	// Find UHD devices
 	uhd::device_addr_t addr(args);
-	uhd::device_addrs_t dev_addrs = uhd::device::find(addr);
-	if (dev_addrs.size() == 0) {
-		LOG(ALERT) << "No UHD devices found with address '" << args << "'";
-		return -1;
-	}
+
+	// Note: Dynamically setting the master clock seems not to work,
+	// needs the master_clock_rate set to 17.33... MHz in the arguments.
 
 	// Use the first found device
-	LOG(INFO) << "Using discovered UHD device " << dev_addrs[0].to_string();
 	try {
-		usrp_dev = uhd::usrp::multi_usrp::make(dev_addrs[0]);
+		usrp_dev = uhd::usrp::multi_usrp::make(addr);
 	} catch(...) {
-		LOG(ALERT) << "UHD make failed, device " << dev_addrs[0].to_string();
+		LOG(ALERT) << "UHD make failed, device " << addr.to_string();
 		return -1;
 	}
 
@@ -605,6 +624,7 @@ int uhd_device::open(const std::string &args, ReferenceType ref)
 	case X3XX:
 		return RESAMP_100M;
 	case B2XX:
+	case E3XX:
 	case UMTRX:
 	default:
 		return NORMAL;
@@ -664,7 +684,7 @@ bool uhd_device::start()
 	setPriority();
 
 	// Register msg handler
-	uhd::msg::register_handler(&uhd_msg_handler);
+	uhd::log::add_logger("openbts", &uhd_msg_handler);
 
 	// Start asynchronous event (underrun check) loop
 	async_event_thrd.start((void * (*)(void*))async_event_loop, (void*)this);
diff --git a/configure.ac b/configure.ac
index 19c1ba6..f601d9b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -125,7 +125,7 @@ AC_CHECK_LIB(a53, _init, ,[AC_MSG_ERROR([Cannot link with -la53. Install the lib
 
 dnl Check for sip+rtp libs
 AC_MSG_CHECKING([ortp api version])
-AS_IF([gcc -I=/usr/local/include -o config/test_ortp_version config/test_ortp_version.cpp -lortp &> /dev/null], [
+AS_IF([g++ -I=/usr/local/include -o config/test_ortp_version config/test_ortp_version.cpp -lortp &> /dev/null], [
 	AC_DEFINE(ORTP_NEW_API, 1, rtp_session_set_local_addr takes four arguments)
 	AC_MSG_RESULT([>= 0.22.0])
 	],
@@ -138,6 +138,8 @@ dnl Check for glibc-specific network functions
 AC_CHECK_FUNC(gethostbyname_r, [AC_DEFINE(HAVE_GETHOSTBYNAME_R, 1, [Define if libc implements gethostbyname_r])])
 AC_CHECK_FUNC(gethostbyname2_r, [AC_DEFINE(HAVE_GETHOSTBYNAME2_R, 1, [Define if libc implements gethostbyname2_r])])
 
+AC_CHECK_FUNC(gettid, [AC_DEFINE(HAVE_GETTID, 1, [Define if libc implements gettid])])
+
 dnl Output files
 AC_CONFIG_FILES([\
     Makefile \
