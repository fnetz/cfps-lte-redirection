diff --git a/host/lib/usrp/cores/rx_dsp_core_3000.cpp b/host/lib/usrp/cores/rx_dsp_core_3000.cpp
index ff7caf105..9436af941 100644
--- a/host/lib/usrp/cores/rx_dsp_core_3000.cpp
+++ b/host/lib/usrp/cores/rx_dsp_core_3000.cpp
@@ -8,7 +8,6 @@
 #include <uhd/exception.hpp>
 #include <uhd/types/dict.hpp>
 #include <uhd/utils/log.hpp>
-#include <uhd/utils/math.hpp>
 #include <uhd/utils/safe_call.hpp>
 #include <uhdlib/usrp/cores/dsp_core_utils.hpp>
 #include <uhdlib/usrp/cores/rx_dsp_core_3000.hpp>
@@ -84,19 +83,21 @@ public:
         _iface->poke32(REG_DSP_RX_MUX, reg_val);
 
         if (fe_conn.get_sampling_mode() == uhd::usrp::fe_connection_t::HETERODYNE) {
-            // 1. Remember the sign of the IF frequency.
-            //   It will be discarded in the next step
-            int if_freq_sign = boost::math::sign(fe_conn.get_if_freq());
+            // 1. Remember the IF frequency
+            const double fe_if_freq = fe_conn.get_if_freq();
             // 2. Map IF frequency to the range [0, _tick_rate)
-            double if_freq = std::abs(std::fmod(fe_conn.get_if_freq(), _tick_rate));
-            // 3. Map IF frequency to the range [-_tick_rate/2, _tick_rate/2)
+            double if_freq = std::abs(std::fmod(fe_if_freq, _tick_rate));
+            // 3. Map IF frequency to the range [-_tick_rate/2, _tick_rate/2]
             //   This is the aliased frequency
             if (if_freq > (_tick_rate / 2.0)) {
                 if_freq -= _tick_rate;
             }
             // 4. Set DSP offset to spin the signal in the opposite
             //   direction as the aliased frequency
-            _dsp_freq_offset = if_freq * (-if_freq_sign);
+            if (!std::signbit(fe_if_freq)) {
+                if_freq *= -1.0;
+            }
+            _dsp_freq_offset = if_freq;
         } else {
             _dsp_freq_offset = 0.0;
         }
diff --git a/host/lib/usrp/cores/rx_frontend_core_3000.cpp b/host/lib/usrp/cores/rx_frontend_core_3000.cpp
index 7f88a3e98..eac7b3bfd 100644
--- a/host/lib/usrp/cores/rx_frontend_core_3000.cpp
+++ b/host/lib/usrp/cores/rx_frontend_core_3000.cpp
@@ -114,19 +114,21 @@ public:
 
         UHD_ASSERT_THROW(_adc_rate != 0.0)
         if (fe_conn.get_sampling_mode() == fe_connection_t::HETERODYNE) {
-            // 1. Remember the sign of the IF frequency.
-            //   It will be discarded in the next step
-            const int if_freq_sign = boost::math::sign(fe_conn.get_if_freq());
+            // 1. Remember the IF frequency
+            const double fe_if_freq = fe_conn.get_if_freq();
             // 2. Map IF frequency to the range [0, _adc_rate)
-            double if_freq = std::abs(std::fmod(fe_conn.get_if_freq(), _adc_rate));
-            // 3. Map IF frequency to the range [-_adc_rate/2, _adc_rate/2)
+            double if_freq = std::abs(std::fmod(fe_if_freq, _adc_rate));
+            // 3. Map IF frequency to the range [-_adc_rate/2, _adc_rate/2]
             //   This is the aliased frequency
             if (if_freq > (_adc_rate / 2.0)) {
                 if_freq -= _adc_rate;
             }
             // 4. Set DSP offset to spin the signal in the opposite
             //   direction as the aliased frequency
-            const double cordic_freq = if_freq * (-if_freq_sign);
+            if (!std::signbit(fe_if_freq)) {
+                if_freq *= -1.0;
+            }
+            const double cordic_freq = if_freq;
             UHD_ASSERT_THROW(uhd::math::fp_compare::fp_compare_epsilon<double>(4.0)
                              == std::abs(_adc_rate / cordic_freq));
 
diff --git a/host/lib/usrp/usrp2/usrp2_impl.cpp b/host/lib/usrp/usrp2/usrp2_impl.cpp
index 8ccb02935..470eba7a6 100644
--- a/host/lib/usrp/usrp2/usrp2_impl.cpp
+++ b/host/lib/usrp/usrp2/usrp2_impl.cpp
@@ -15,11 +15,11 @@
 #include <uhd/utils/safe_call.hpp>
 #include <uhd/utils/static.hpp>
 #include <uhdlib/usrp/common/apply_corrections.hpp>
-#include <boost/asio.hpp> //used for htonl and ntohl
+#include <boost/asio.hpp>
 #include <boost/asio/ip/address_v4.hpp>
 #include <boost/bind.hpp>
 #include <boost/format.hpp>
-#include <boost/thread.hpp>
+#include <cmath>
 
 using namespace uhd;
 using namespace uhd::usrp;
@@ -896,22 +896,21 @@ double usrp2_impl::set_tx_dsp_freq(const std::string& mb, const double freq_)
     const double tick_rate = _tree->access<double>("/mboards/" + mb + "/tick_rate").get();
 
     // calculate the DAC shift (multiples of rate)
-    const int sign         = boost::math::sign(new_freq);
-    const int zone         = std::min(boost::math::iround(new_freq / tick_rate), 2);
-    const double dac_shift = sign * zone * tick_rate;
+    const int zone         = std::max(std::min<int>(std::lround(new_freq / tick_rate), 2), -2);
+    const double dac_shift = zone * tick_rate;
     new_freq -= dac_shift; // update FPGA DSP target freq
     UHD_LOG_TRACE("USRP2",
         "DSP Tuning: Requested " + std::to_string(freq_ / 1e6)
             + " MHz, Using "
               "Nyquist zone "
-            + std::to_string(sign * zone)
+            + std::to_string(zone)
             + ", leftover DSP tuning: " + std::to_string(new_freq / 1e6) + " MHz.");
 
     // set the DAC shift (modulation mode)
     if (zone == 0) {
         _mbc[mb].codec->set_tx_mod_mode(0); // no shift
     } else {
-        _mbc[mb].codec->set_tx_mod_mode(sign * 4 / zone); // DAC interp = 4
+        _mbc[mb].codec->set_tx_mod_mode(4 / zone); // DAC interp = 4
     }
 
     return _mbc[mb].tx_dsp->set_freq(new_freq) + dac_shift; // actual freq
